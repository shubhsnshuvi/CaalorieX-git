"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Download, Loader2 } from "lucide-react"
import { PDFDownloadLink, Document, Page, Text, View, StyleSheet } from "@react-pdf/renderer"

interface MealPlanPdfProps {
  mealPlan: any
  dietPreference: string
  dietGoal: string
  calorieGoal: number
  dietPeriod: string
}

// Update the styles to be more professional
const styles = StyleSheet.create({
  page: {
    padding: 30,
    backgroundColor: "#ffffff",
  },
  header: {
    fontSize: 24,
    marginBottom: 20,
    textAlign: "center",
    color: "#2e7d32",
    fontWeight: "bold",
  },
  subheader: {
    fontSize: 18,
    marginBottom: 10,
    color: "#2e7d32",
    fontWeight: "bold",
  },
  dayHeader: {
    fontSize: 16,
    marginTop: 15,
    marginBottom: 10,
    backgroundColor: "#e8f5e9",
    padding: 8,
    borderRadius: 4,
    color: "#2e7d32",
    fontWeight: "bold",
  },
  mealHeader: {
    fontSize: 14,
    marginTop: 10,
    marginBottom: 5,
    fontWeight: "bold",
    color: "#388e3c",
  },
  item: {
    marginBottom: 3,
    fontSize: 12,
  },
  nutritionInfo: {
    marginTop: 5,
    fontSize: 12,
    color: "#555555",
  },
  footer: {
    marginTop: 20,
    fontSize: 10,
    textAlign: "center",
    color: "#666666",
  },
  section: {
    marginBottom: 15,
  },
  summaryTable: {
    marginTop: 15,
    marginBottom: 15,
  },
  tableRow: {
    flexDirection: "row",
    borderBottomWidth: 1,
    borderBottomColor: "#eeeeee",
    paddingBottom: 3,
    paddingTop: 3,
  },
  tableHeader: {
    fontWeight: "bold",
    color: "#388e3c",
  },
  tableCell: {
    flex: 1,
    fontSize: 12,
  },
})

// Make sure the MealPlanDocument component is properly defined
const MealPlanDocument = ({ mealPlan }) => (
  <Document>
    <Page size="A4" style={styles.page}>
      <Text style={styles.header}>Your 7-Day Meal Plan</Text>

      <View style={styles.section}>
        <Text style={styles.subheader}>Plan Summary</Text>
        <Text style={styles.item}>Diet Preference: {mealPlan.dietPreference || "Standard"}</Text>
        {mealPlan.medicalCondition && (
          <Text style={styles.item}>Medical Consideration: {mealPlan.medicalCondition}</Text>
        )}
        <Text style={styles.item}>Diet Goal: {mealPlan.dietGoal || "Maintenance"}</Text>
        <Text style={styles.item}>Daily Calories: {mealPlan.dailyCalories} kcal</Text>
      </View>

      {mealPlan.weeklyMealPlan.map((day, dayIndex) => (
        <View key={dayIndex} style={styles.section}>
          <Text style={styles.dayHeader}>{day.day}</Text>

          {day.meals.map((meal, mealIndex) => (
            <View key={mealIndex}>
              <Text style={styles.mealHeader}>
                {meal.name} ({meal.calories} kcal)
              </Text>

              {meal.items.map((item, itemIndex) => (
                <Text key={itemIndex} style={styles.item}>
                  â€¢ {item.name}: {item.portion} {item.unit} ({item.calories} kcal)
                </Text>
              ))}

              <Text style={styles.nutritionInfo}>
                Protein: {meal.items.reduce((sum, item) => sum + (item.protein || 0), 0)}g | Carbs:{" "}
                {meal.items.reduce((sum, item) => sum + (item.carbs || 0), 0)}g | Fat:{" "}
                {meal.items.reduce((sum, item) => sum + (item.fat || 0), 0)}g
              </Text>
            </View>
          ))}
        </View>
      ))}

      {mealPlan.nutritionTotals && (
        <View style={styles.summaryTable}>
          <Text style={styles.subheader}>Weekly Nutrition Summary</Text>

          <View style={[styles.tableRow, styles.tableHeader]}>
            <Text style={styles.tableCell}>Day</Text>
            <Text style={styles.tableCell}>Calories</Text>
            <Text style={styles.tableCell}>Protein</Text>
            <Text style={styles.tableCell}>Carbs</Text>
            <Text style={styles.tableCell}>Fat</Text>
          </View>

          {mealPlan.nutritionTotals.map((day, index) => (
            <View key={index} style={styles.tableRow}>
              <Text style={styles.tableCell}>{day.day}</Text>
              <Text style={styles.tableCell}>{day.calories} kcal</Text>
              <Text style={styles.tableCell}>{day.protein}g</Text>
              <Text style={styles.tableCell}>{day.carbs}g</Text>
              <Text style={styles.tableCell}>{day.fat}g</Text>
            </View>
          ))}
        </View>
      )}

      <Text style={styles.footer}>Generated by CalorieX on {new Date().toLocaleDateString()}</Text>
    </Page>
  </Document>
)

// The component is exported as MealPlanPdf (lowercase 'p' in "Pdf")
export function MealPlanPdf({ mealPlan, dietPreference, dietGoal, calorieGoal, dietPeriod }: MealPlanPdfProps) {
  const [isGenerating, setIsGenerating] = useState(false)

  const formatDietPreference = (pref: string) => {
    return pref === "indian-vegetarian" ? "Indian Vegetarian" : pref.charAt(0).toUpperCase() + pref.slice(1)
  }

  const formatDietGoal = (goal: string) => {
    return goal
      .split("-")
      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
      .join(" ")
  }

  const formatDietPeriod = (period: string) => {
    return period.replace("-", " ")
  }

  // Check if this is a USDA-sourced meal plan
  const isUsdaMealPlan = mealPlan && mealPlan.some((day: any) => day.meals && day.meals.some((meal: any) => meal.fdcId))

  const generatePDF = async () => {
    setIsGenerating(true)
    try {
      // @ts-ignore
      const blob = await new PDFDownloadLink({
        document: <MealPlanDocument mealPlan={mealPlan} />,
        fileName: "CalorieX-Meal-Plan.pdf",
      }).toBlob()
      const url = URL.createObjectURL(blob)
      const link = document.createElement("a")
      link.href = url
      link.download = "CalorieX-Meal-Plan.pdf"
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      URL.revokeObjectURL(url)
    } catch (error) {
      console.error("Error generating PDF:", error)
    } finally {
      setIsGenerating(false)
    }
  }

  return (
    <Button
      onClick={generatePDF}
      disabled={isGenerating || !mealPlan || mealPlan.length === 0}
      variant="outline"
      className="gap-2"
    >
      {isGenerating ? (
        <>
          <Loader2 className="h-4 w-4 animate-spin" />
          Generating PDF...
        </>
      ) : (
        <>
          <Download className="h-4 w-4" />
          Download as PDF
        </>
      )}
    </Button>
  )
}
